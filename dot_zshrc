# Ref: https://github.com/mischavandenburg/dotfiles
# Ref: https://github.com/dreamsofautonomy/zensh
# Ref: https://github.com/Alexis12119/dotfiles
# Ref: https://github.com/stevearc/dotfiles
# Ref: https://github.com/omerxx/dotfiles
# Ref: https://github.com/rusty-electron/dotfiles
# Ref: https://github.com/chaneyzorn/dotfiles
# Ref: https://github.com/siduck/dotfiles
# #ef: https://github.com/craftzdog/dotfiles-public

# ENVIRONMENT VARIABLES
DISABLE_AUTO_UPDATE=true
export ZSH="$HOME/.oh-my-zsh"
export NVIM_APPNAME='nvim'
export TERM='xterm-256color'
export EDITOR='nvim'
export VISUAL='code'
export PAGER='delta'
# https://github.com/catppuccin/fzf - not use background for transparent
export FZF_DEFAULT_OPTS=" \
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
--color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8 \
--layout=reverse \
--cycle \
--scroll-off=5 \
--border \
--preview-window=right,60%,border-left \
--bind ctrl-u:preview-half-page-up \
--bind ctrl-d:preview-half-page-down \
--bind ctrl-f:preview-page-down \
--bind ctrl-b:preview-page-up \
--bind ctrl-g:preview-top \
--bind ctrl-h:preview-bottom \
--bind alt-w:toggle-preview-wrap \
--bind ctrl-e:toggle-preview"
# Update path
export PATH="$HOME/.local/share/nvim/mason/bin:$HOME/.scripts:$PATH"

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

has() {
	command -v $1 >/dev/null
}

# List of plugins to use in oh-my-zsh
plugins=(
  git
  sudo
  zsh-256color
  zsh-autosuggestions
  zsh-syntax-highlighting
  history-substring-search # Always below zsh-syntax-highlighting
  wakatime
  fzf
  fzf-tab
  archlinux
)
source $ZSH/oh-my-zsh.sh

# In case a command is not found, try to find the package that has it
# function command_not_found_handler {
#     local purple='\e[1;35m' bright='\e[0;1m' green='\e[1;32m' reset='\e[0m'
#     printf 'zsh: command not found: %s\n' "$1"
#     local entries=( ${(f)"$(/usr/bin/pacman -F --machinereadable -- "/usr/bin/$1")"} )
#     if (( ${#entries[@]} )) ; then
#         printf "${bright}$1${reset} may be found in the following packages:\n"
#         local pkg
#         for entry in "${entries[@]}" ; do
#             local fields=( ${(0)entry} )
#             if [[ "$pkg" != "${fields[2]}" ]] ; then
#                 printf "${purple}%s/${bright}%s ${green}%s${reset}\n" "${fields[1]}" "${fields[2]}" "${fields[3]}"
#             fi
#             printf '    /%s\n' "${fields[4]}"
#             pkg="${fields[2]}"
#         done
#     fi
#     return 127
# }

# Detect the AUR wrapper
if pacman -Qi yay &>/dev/null ; then
   aurhelper="yay"
elif pacman -Qi paru &>/dev/null ; then
   aurhelper="paru"
fi

function in {
    local -a inPkg=("$@")
    local -a arch=()
    local -a aur=()

    for pkg in "${inPkg[@]}"; do
        if pacman -Si "${pkg}" &>/dev/null ; then
            arch+=("${pkg}")
        else 
            aur+=("${pkg}")
        fi
    done

    if [[ ${#arch[@]} -gt 0 ]]; then
        sudo pacman -S "${arch[@]}"
    fi

    if [[ ${#aur[@]} -gt 0 ]]; then
        ${aurhelper} -S "${aur[@]}"
    fi
}


# ALIAS
# Ls
if has eza; then
  EZA_OPTS=(--group-directories-first -s Name -I '.DS_Store' --icons=auto --colour=always)
  alias l="eza -lh  $EZA_OPTS" # long list
	alias ls="exa -1 $EZA_OPTS" # Normal ls
	alias ll="exa -lag $EZA_OPTS"
  alias ld="eza -lhD $EZA_OPTS" # long list dirs
  alias lt="eza --icons=auto --tree $EZA_OPTS" # list folder as tree
else
	alias ls='ls -A --color=auto'
	alias ll='ls -lAg --color=auto'
fi

# Change directory
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

# Make directory
alias mkdir='mkdir -p'

# Alias: Chezmoi
cmc() {
  { [ -n "$1" ] && chezmoi git "commit -m \"$1\"" || chezmoi git "commit"; } && chezmoi git push
}
cms() { 
  chezmoi re-add
  chezmoi git "f" || { echo 'No "f" alias for git!'; cmc; }
}
alias cm='chezmoi'
alias cma='chezmoi add'

# Alias: Others
alias rl='source ~/.zshrc'
alias v='nvim'
alias lg='lazygit'
alias yz='yazi'
alias t='tmux'
alias ta='tmux attach'
alias tkss='tmux kill-server'
alias c='clear'
alias cls='clear'


# FUNCTIONS

tks() { 
  tmux kill-session -t $1
}


# KEYBINDINGS
bindkey -e
bindkey '^p' history-substring-search-up
bindkey '^n' history-substring-search-down
bindkey '^[w' kill-region
bindkey '^H' backward-kill-word # Source: https://www.reddit.com/r/neovim/comments/18txgth/ctrlbackspace_doesnt_work_as_intended_in_neovim

# ZSH CONFIG
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
HISTORY_SUBSTRING_SEARCH_PREFIXED=1
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# Completion styling
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' menu no
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*:git-checkout:*' sort false
# zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
zstyle ':fzf-tab:*' switch-group '<' '>'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'eza -1 --color=always --icons=always $realpath'
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always --icons=always $realpath'


# YAZI CONFIG

# ChatGPT gen it for me :(
yzcd() {
  local tmp=$(mktemp)
  yazi "$@" --cwd-file="$tmp"
  local cwd=$(<"$tmp")
  if [[ -n "$cwd" && "$cwd" != "$PWD" ]]; then
    cd "$cwd"
  fi
  rm "$tmp"
}

bindkey -s '^d' 'yzcd\n'

# FZF CONFIG
source ~/.zsh/fzf.sh
source ~/.zsh/wifi.sh


# RUN SOME STUFF
fastfetch
eval "$(starship init zsh)"
eval "$(zoxide init zsh --cmd cd)"
